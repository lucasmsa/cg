# * axis are -> x, y, z, [u, v] => those are for texturing
    # cube_vertices = [-0.5, -0.5,  0.5, 0.0, 0.0,
    #          0.5, -0.5,  0.5, 1.0, 0.0,
    #          0.5,  0.5,  0.5, 1.0, 1.0,
    #         -0.5,  0.5,  0.5, 0.0, 1.0,

    #         -0.5, -0.5, -0.5, 0.0, 0.0,
    #          0.5, -0.5, -0.5, 1.0, 0.0,
    #          0.5,  0.5, -0.5, 1.0, 1.0,
    #         -0.5,  0.5, -0.5, 0.0, 1.0,

    #          0.5, -0.5, -0.5, 0.0, 0.0,
    #          0.5,  0.5, -0.5, 1.0, 0.0,
    #          0.5,  0.5,  0.5, 1.0, 1.0,
    #          0.5, -0.5,  0.5, 0.0, 1.0,

    #         -0.5,  0.5, -0.5, 0.0, 0.0,
    #         -0.5, -0.5, -0.5, 1.0, 0.0,
    #         -0.5, -0.5,  0.5, 1.0, 1.0,
    #         -0.5,  0.5,  0.5, 0.0, 1.0,

    #         -0.5, -0.5, -0.5, 0.0, 0.0,
    #          0.5, -0.5, -0.5, 1.0, 0.0,
    #          0.5, -0.5,  0.5, 1.0, 1.0,
    #         -0.5, -0.5,  0.5, 0.0, 1.0,

    #          0.5, 0.5, -0.5, 0.0, 0.0,
    #         -0.5, 0.5, -0.5, 1.0, 0.0,
    #         -0.5, 0.5,  0.5, 1.0, 1.0,
    #          0.5, 0.5,  0.5, 0.0, 1.0]

    # cube_indices = [ 0,  1,  2,  2,  3,  0,
    #             4,  5,  6,  6,  7,  4,
    #             8,  9, 10, 10, 11,  8,
    #             12, 13, 14, 14, 15, 12,
    #             16, 17, 18, 18, 19, 16,
    #             20, 21, 22, 22, 23, 20]

    # cube_vertices = np.array(cube_vertices, dtype=np.float32)
    # cube_indices = np.array(cube_indices, dtype=np.uint32)

# * creating a square, note that the z axis is 
    # * always zero
    quad_vertices = [-0.5, -0.5, 0, 0.0, 0.0,
                      0.5, -0.5, 0, 1.0, 0.0,
                      0.5, 0.5, 0, 1.0, 1.0,
                      -0.5, 0.5, 0, 0.0, 1.0]

    quad_indices = [0, 1, 2, 2, 3, 0]

    quad_vertices = np.array(quad_vertices, dtype=np.float32)
    quad_indices = np.array(quad_indices, dtype=np.uint32)

    # * for this triangle, the axis are:
    # * x, y, z, [R, G, B] => colors not texture
    # * when using gldraw function it is not necessary
    # * to use indices, like in this triangle
    triangle_vertices = [-0.5, -0.5, 0, 1, 0, 0,
                         0.5, -0.5, 0, 0, 1, 0,
                         0.0, 0.5, 0, 0, 0, 1]

    triangle_vertices = np.array(triangle_vertices, dtype=np.float32)
    
    glBindVertexArray(VAO[1])

    glBindBuffer(GL_ARRAY_BUFFER, VBO[1])
    glBufferData(GL_ARRAY_BUFFER, quad_vertices.nbytes, quad_vertices, GL_STATIC_DRAW)
    glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, EBO[1])
    glBufferData(GL_ELEMENT_ARRAY_BUFFER, quad_indices.nbytes, quad_indices, GL_STATIC_DRAW)
    glEnableVertexAttribArray(0)
    glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, cube_vertices.itemsize * 5, ctypes.c_void_p(0))
    glEnableVertexAttribArray(1)
    glVertexAttribPointer(1, 2, GL_FLOAT, GL_FALSE, cube_vertices.itemsize * 5, ctypes.c_void_p(12))

    glBindVertexArray(VAO[2])
    glBindBuffer(GL_ARRAY_BUFFER, VBO[2])
    glBufferData(GL_ARRAY_BUFFER, triangle_vertices.nbytes, triangle_vertices, GL_STATIC_DRAW)
    glEnableVertexAttribArray(0)
    glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, triangle_vertices.itemsize * 6, ctypes.c_void_p(0))
    glEnableVertexAttribArray(2)
    glVertexAttribPointer(2, 3, GL_FLOAT, GL_FALSE, triangle_vertices.itemsize * 6, ctypes.c_void_p(12))

    model = pyrr.matrix44.multiply(quad_pos, rot_y)

        glBindVertexArray(VAO[1])
        glBindTexture(GL_TEXTURE_2D, textures[1])
        glUniformMatrix4fv(model_loc, 1, GL_FALSE, model)
        glDrawElements(GL_TRIANGLES, len(quad_indices), GL_UNSIGNED_INT, None)

        glBindVertexArray(VAO[2])
        glUniform1i(switcher_loc, 1)
        glUniformMatrix4fv(model_loc, 1, GL_FALSE, triangle_pos)
        # * Draw Arrays doesn't need the indices matrix
        glDrawArrays(GL_TRIANGLES, 0, 3)


        # * switcher_loc in zero calls for texture
        # * 1 is color 
        glUniform1i(switcher_loc, 0)

         
    # * Element buffer object
    # glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, EBO[0])
    # glBufferData(GL_ELEMENT_ARRAY_BUFFER, cube_indices.nbytes, cube_indices, GL_STATIC_DRAW)
    
    #quad_pos = pyrr.matrix44.create_from_translation(pyrr.Vector3([-1, 0, -1]))
    #triangle_pos = pyrr.matrix44.create_from_translation(pyrr.Vector3([0, 1, -2]))
    #translation = pyrr.matrix44.create_from_translation(pyrr.Vector3([0, 0, 0]))
    

    # * the view will work as a camera. when you move 1 in the x axis for example
    # * it's relative to moving to the right, or everything being translated to the left
    # view = pyrr.matrix44.create_from_translation(pyrr.Vector3([1, 0, 0]))


    # * creates a orthogonal projection matrix
    # * the most important values to note are the last and the last but one values
    # * they will delimitate the projection space for the scene
    #projection = pyrr.matrix44.create_orthogonal_projection_matrix(0, 1280, 0, 720, -1000, 1000)
    #translation = pyrr.matrix44.create_from_translation(pyrr.Vector3([500, 200, -3]))
   
    # * this will be used to increase the size of the object, at each axis
    # * afterwards [on game loop] it is necessary to combine the scale with 
    # * the other matrices
    #scale = pyrr.matrix44.create_from_scale(pyrr.Vector3([200, 200, 200]))

    # * look at function is an advaced version of view
    # * the parameters are: eye [ where the camera is positioned ],
    # * target [ where the camera is looking at ], up vector [ y axis up of the camera ]
    #view = pyrr.matrix44.create_look_at(pyrr.Vector3([0, 2, 16]),
    #pyrr.Vector3([0, 0, 0]), pyrr.Vector3([0, 1, 0]))
    